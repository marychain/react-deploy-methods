{"version":3,"sources":["components/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["format","time","minutes","Math","floor","seconds","Timer","autostart","onTick","step","useState","setSeconds","isActive","setIsActive","stepTimer","useEffect","timer","setInterval","clearInterval","className","onClick","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAEMA,EAAS,SAAAC,GACX,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,IAC7BC,EAAU,KACbA,EAAU,IAAKA,GACf,IAAIG,EAAUJ,EAAO,GAGrB,OAFGI,EAAU,KACbA,EAAU,IAAKA,GACT,GAAN,OAAUH,EAAV,YAAqBG,IAiCVC,EA9BD,SAAC,GAAsC,IAApCL,EAAmC,EAAnCA,KAAMM,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAAU,EAChBC,mBAAST,GADO,mBACxCI,EADwC,KAC/BM,EAD+B,OAEdD,mBAASH,GAFK,mBAExCK,EAFwC,KAE9BC,EAF8B,OAG3BH,mBAASD,GAAtBK,EAHwC,oBAoBhD,OAfAC,qBAAU,WACN,GAAIV,EAAU,GAAKO,EAAU,CACzB,IAAII,EAAQ,KAOZ,OANiB,IAAbJ,IACAI,EAAQC,aAAY,WAChBN,EAAYN,EAAUS,KACvB,IAAKA,GACRN,EAAOH,IAEJ,WACHa,cAAcF,OAGvB,CAACX,EAASS,EAAWF,EAAUH,EAAMD,IAGpC,8BACI,sBAAKW,UAAU,QAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBnB,EAAOK,KAC/B,wBAAQe,QAAS,kBAAMP,GAAaD,IAApC,SAAiDA,EAAW,OAAS,gBCvBtES,MATf,WACE,OACE,sBAAKF,UAAU,MAAf,UACE,cAAC,EAAD,CAAOlB,KAAK,IAAIQ,KAAK,IAAIF,WAAW,EAAOC,OAAQ,SAACP,GAAD,OAAUqB,QAAQC,IAAI,0FAAsBtB,MAC/F,cAAC,EAAD,CAAOA,KAAK,OAAOQ,KAAK,IAAIF,WAAW,EAAMC,OAAQ,SAACP,GAAD,OAAUqB,QAAQC,IAAI,0FAAsBtB,UCIxFuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.55d136a0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst format = time => {\r\n    let minutes = Math.floor(time / 60);\r\n    if(minutes < 10)\r\n    minutes = '0'+ minutes;\r\n    let seconds = time % 60;\r\n    if(seconds < 10)\r\n    seconds = '0'+ seconds;\r\n    return `${minutes}:${seconds}`;\r\n};\r\n\r\nconst Timer = ({ time, autostart, onTick, step}) => {\r\n    const [ seconds, setSeconds ] = useState(time);\r\n    const [ isActive, setIsActive ] = useState(autostart);\r\n    const [ stepTimer] = useState(step);\r\n\r\n    useEffect(() => {\r\n        if (seconds > 0 && isActive) {\r\n            let timer = null;\r\n            if( isActive === true ) {\r\n                timer = setInterval(() =>{\r\n                    setSeconds( seconds - stepTimer);\r\n                }, 1000*stepTimer);\r\n                onTick(seconds);\r\n            }\r\n            return () => {\r\n                clearInterval(timer);\r\n            }\r\n        } \r\n    }, [seconds, stepTimer, isActive, step, onTick]);\r\n\r\n    return (\r\n        <div>\r\n            <div className='timer'>\r\n                <time className='time'>{format(seconds)}</time>\r\n                <button onClick={() => setIsActive(!isActive) }>{isActive ? 'stop' : 'start'}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;\r\n\r\n","import './App.css';\nimport './components/assets/css/style.css';\nimport Timer from './components/Timer.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer time='5' step='1' autostart={false} onTick={(time) => console.log(\"Залишилось часу: \" + time)} />\n      <Timer time='5876' step='2' autostart={true} onTick={(time) => console.log(\"Залишилось часу: \" + time)}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}