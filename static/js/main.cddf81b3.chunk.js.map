{"version":3,"sources":["components/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["format","time","minutes","Math","floor","seconds","Timer","step","useState","setSeconds","secondsTimerTwo","setSecondsTimerTwo","isActive","setIsActive","isActiveTwo","setIsActiveTwo","useEffect","timer","setInterval","clearInterval","console","log","timerTwo","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAEMA,EAAS,SAAAC,GACX,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,IAC7BC,EAAU,KACbA,EAAU,IAAKA,GACf,IAAIG,EAAUJ,EAAO,GAGrB,OAFGI,EAAU,KACbA,EAAU,IAAKA,GACT,GAAN,OAAUH,EAAV,YAAqBG,IAiDVC,EA9CD,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,KAAMM,EAAW,EAAXA,KAAW,EACEC,mBAAS,GADX,mBACtBH,EADsB,KACbI,EADa,OAEkBD,mBAASP,GAF3B,mBAEtBS,EAFsB,KAELC,EAFK,OAGIH,oBAAS,GAHb,mBAGtBI,EAHsB,KAGZC,EAHY,OAIUL,oBAAS,GAJnB,mBAItBM,EAJsB,KAITC,EAJS,KAgC9B,OA1BAC,qBAAU,WACN,GAAIX,EAAU,GAAKO,EAAU,CACzB,IAAMK,EAAQC,aAAY,WACtBT,EAAYJ,EAAU,KACvB,KACH,OAAO,WACHc,cAAcF,IAEA,IAAZZ,GACNe,QAAQC,IAAI,8DAEjB,CAAEhB,EAASO,IAEdI,qBAAU,WACN,GAAIN,EAAkB,GAAKI,EAAa,CACpC,IAAMQ,EAAWJ,aAAY,WACzBP,EAAoBD,EAAkBH,KACvC,KAGH,OAFAa,QAAQC,IAAI,0FAAyC,IAAlBX,EAA0B,iBAEtD,WACHS,cAAcG,OAGvB,CAAEZ,EAAiBI,EAAaP,IAG/B,gCACI,sBAAKgB,UAAU,QAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBvB,EAAOK,KAC/B,wBAAQmB,QAAS,kBAAMX,GAAaD,IAApC,SAAiDA,EAAW,OAAS,aAEzE,sBAAKW,UAAU,QAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBvB,EAAOU,KAC/B,wBAAQc,QAAS,kBAAMT,GAAgBD,IAAvC,SAAsDA,EAAc,OAAS,iBCxC9EW,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACE,cAAC,EAAD,CAAOtB,KAAK,OAAOM,KAAK,SCKfmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cddf81b3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst format = time => {\r\n    let minutes = Math.floor(time / 60);\r\n    if(minutes < 10)\r\n    minutes = '0'+ minutes;\r\n    let seconds = time % 60;\r\n    if(seconds < 10)\r\n    seconds = '0'+ seconds;\r\n    return `${minutes}:${seconds}`;\r\n};\r\n\r\nconst Timer = ({ time, step }) => {\r\n    const [ seconds, setSeconds ] = useState(5);\r\n    const [ secondsTimerTwo, setSecondsTimerTwo ] = useState(time);\r\n    const [ isActive, setIsActive ] = useState(false);\r\n    const [ isActiveTwo, setIsActiveTwo ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (seconds > 0 && isActive) {\r\n            const timer = setInterval(() =>{\r\n                setSeconds( seconds - 1);\r\n            }, 1000)\r\n            return () => {\r\n                clearInterval(timer);\r\n            }\r\n        } else if(seconds === 0) {\r\n            console.log('Час вийшов!');\r\n            }\r\n    }, [ seconds, isActive ]);\r\n\r\n    useEffect(() => {\r\n        if (secondsTimerTwo > 0 && isActiveTwo) {\r\n            const timerTwo = setInterval(() =>{\r\n                setSecondsTimerTwo( secondsTimerTwo - step);\r\n            }, 2000)\r\n            console.log(\"Залишилось часу: \" + (secondsTimerTwo * 1000) + ' мс')\r\n\r\n            return () => {\r\n                clearInterval(timerTwo);\r\n            }\r\n        } \r\n    }, [ secondsTimerTwo, isActiveTwo, step ]);\r\n\r\n    return (\r\n        <div>\r\n            <div className='timer'>\r\n                <time className='time'>{format(seconds)}</time>\r\n                <button onClick={() => setIsActive(!isActive) }>{isActive ? 'stop' : 'start'}</button>\r\n            </div>\r\n            <div className='timer'>\r\n                <time className='time'>{format(secondsTimerTwo)}</time>\r\n                <button onClick={() => setIsActiveTwo(!isActiveTwo)}>{isActiveTwo ? 'stop' : 'start'}</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;\r\n\r\n","import './App.css';\nimport './components/assets/css/style.css';\nimport Timer from './components/Timer.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer time='5678' step='2' />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}